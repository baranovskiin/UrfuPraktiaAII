# -*- coding: utf-8 -*-
"""Копия блокнота "Практика 0.9.0.ipynb"

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1C7_7_SBTokwOqiZz3S2lpO4jsHcKvlFf

ФИО
"""

Барановский Никита Евгеньевич

"""# Дисклеймер

В данной практике вам необходимо применить все ваши знания по темам:

- Функции
- Словари
- Списки
- Множества
- Условные конструкции
- Запросы

и все что было изучено на прошлых практических занятиях

В каждом задании кратко описаны функции, которые необходимо реализовать, детали реализации вы должны продумать самостоятельно

# Задание 0

Создайте функцию по нахождению уникальных элементов из двух списков



```
a = [1, 2, 3, 4]
b = [3, 4, 5, 6]
```
"""

def unique_elements(list1, list2):

    unique_in_list1 = set(list1) - set(list2)
    unique_in_list2 = set(list2) - set(list1)

    unique_elements = unique_in_list1.union(unique_in_list2)
    return list(unique_elements)


a = [1, 2, 3, 4]
b = [3, 4, 5, 6]

result = unique_elements(a, b)
print(result)

"""# Задание 1

Симулятор виртуального питомца

Цель: создать виртуальный симулятор домашних животных, в котором пользователи смогут заводить питомцев и ухаживать за ними.

Требования:

- Функция для усыновления питомца (имя, тип, возраст).
- Функция для того, чтобы покормить питомца, поиграть с ним или уложить его спать.
- Функция для отображения состояния питомца (голод, радость, энергия).
"""

status_pet = {'радость': 'нейтральное', 'голод': 'достаточное', 'энергия': 'бодр'}


def pet(request):

    name = input('Введите кличку питомца')
    typee = input('Тип животного')
    age = int(input('Возраст питомца'))

    print('Теперь у вас есть питомец', name)

    return name, typee, age

def status(answer, status_pet):

    if answer == 'покормить' or answer == 'Покормить':
        status_pet['голод'] = 'сыт'
        status_pet['радость'] = 'счастлив'

    elif answer == 'поиграть' or answer == 'Поиграть':
        status_pet['радость'] = 'счастлив'
        status_pet['энергия'] = 'устал'

    elif answer == 'уложить спать' or answer == 'Уложить спать':
        status_pet['энергия'] = 'полон сил'
        status_pet['радость'] = 'нейтральное'

    else:
        print(status_pet)

    return status_pet



def status_check(answer):

    status(answer, status_pet)


def feed(answer):

    fridge = ['яблоко', 'мясо', 'хлеб', 'торт']
    print(fridge)

    chose1 = int(input('выберите чем хотите накормить питомца(введите номер еды)'))

    print('Вы накормили вашего питомца, с помощью', fridge[chose1-1])


def play(answer):

    game = ['футболл', 'догонялки', 'прятки', 'мячик']
    print(game)

    chose2 = int(input('выберите во что хотите поиграть с питомцем(введите номер игры)'))

    print('Вы поиграли с питомцем в', game[chose2-1])


def sleep(answer):
    print('Вы уложили своего питомца спать')


while True:

    request = input('Хотите приютить питомца?')

    if request == 'да' or request == 'Да':
        pet(request)
        break
    else:
        print('Возвращайтесь еще')

while True:

    answer = input('Хотите покормить, поиграть или уложить спать вашего питомца?(или проверить "статус питомца")')

    if answer == 'покормить' or answer == 'Покормить':
        feed(status(answer, status_pet))

    elif answer == 'поиграть' or answer == 'Поиграть':
        play(status(answer, status_pet))

    elif answer == 'уложить спать' or answer == 'Уложить спать':
        sleep(status(answer, status_pet))

    elif answer == 'статус питомца' or answer == 'Статус питомца':
        status_check(answer)
        break

"""# Задание 2

Рыцарь и дракон

Цель: создать небольшую игру, в которой вам необходимо играть за рыцаря и сразиться с драконом

Требования:

- Создание персонажа (имя, информация о доспехах, оружии, урон, здоровье)
- Управление персонажем и мини сюжет
- Создание дракона (Имя, информация о здоровье и уроне)
- Боевая система (нанесение и получение урона, урон должен быть случайным в заданном диапазоне)
- Реализовать бой между драконом и рыцарем
"""

import random

class Character:
    def __init__(self, name, armor, weapon, damage_range, health):
        self.name = name
        self.armor = armor
        self.weapon = weapon
        self.damage_range = damage_range
        self.health = health

    def attack(self):
        damage = random.randint(*self.damage_range)
        print(f"{self.name} использует {self.weapon} и наносит {damage} урона!")
        return damage

    def take_damage(self, damage):
        effective_damage = max(0, damage - self.armor)
        self.health -= effective_damage
        print(f"{self.name} получает {effective_damage} урона! Оставшееся здоровье: {self.health}")

def create_knight():
    name = input("Введите имя рыцаря: ")
    armor = random.randint(1, 5)
    weapon = "Меч"
    damage_range = (5, 10)
    health = 30
    return Character(name, armor, weapon, damage_range, health)

def create_dragon():
    name = "Дракон"
    armor = random.randint(1, 3)
    weapon = "Огненное дыхание"
    damage_range = (7, 12)
    health = 40
    return Character(name, armor, weapon, damage_range, health)

def battle(knight, dragon):
    print(f"{knight.name} сбросил свою броню и готов сразиться с {dragon.name}!\n")

    while knight.health > 0 and dragon.health > 0:
        input(f"{knight.name}, нажмите Enter, чтобы атаковать дракона!")
        dragon.take_damage(knight.attack())

        if dragon.health <= 0:
            print(f"{dragon.name} повержен! {knight.name} победил!")
            break

        input(f"{dragon.name} атакует! Нажмите Enter, чтобы увидеть результат атаки.")
        knight.take_damage(dragon.attack())

        if knight.health <= 0:
            print(f"{knight.name} был побежден! {dragon.name} одержал победу!")
            break

def main():
    knight = create_knight()
    dragon = create_dragon()

    battle(knight, dragon)

if __name__ == "__main__":
    main()

"""# Задание 3

Цель - создать менеджера команды Pokémon, который позволит пользователям:

- Добавлять покемонов в свою команду. (если такого покемона еще нет в команде)
- Удалять покемонов из их команды.
- Просматривать подробную информацию обо всех покемонах в команде.
- Находить покемона по имени.
- Устраивать тренировочный бой между двумя покемонами

Для данной задачи используйте: https://pokeapi.co/
"""

