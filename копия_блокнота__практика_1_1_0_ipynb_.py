# -*- coding: utf-8 -*-
"""Копия блокнота "Практика 1.1.0.ipynb"

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sU-39g3kB9nt7kiRCUuwFKYQGPxVlSKr

**ФИО:**
"""

Барановский Никита Евгеньевич

"""# Задание 1

**Описание:** Создайте иерархию классов для разных типов сотрудников в компании. Реализуйте родительский класс Employee и дочерние классы Manager и Developer. Каждый класс должен иметь метод для расчета зарплаты на основе различных критериев класса.


Отрабатываемый принцип: Наследование
"""

class Employee:

    def __init__(self, name, gender, work, job):
        self.Name = name
        self.Gender = gender
        self.Work = work
        self.Job = job

    def name(self):
        return self.Name, self.Gender, self.Work, self.Job

class Manager(Employee):
    salarys = 5000

    def salary(self):
        if self.Gender == 'м':
            money = self.salarys * self.Work + 1200

        else:
            money = self.salarys * self.Work + 1100

        if self.Work >= 10:
            premia = 2500

            money = money + premia
        print(money)

class Developer(Employee):
    salarys = 5000

    def salary(self):
        if self.Gender == 'м':
            money = self.salarys * self.Work + 1200

        else:
            money = self.salarys * self.Work + 1100

        if self.Work >= 10:
            premia = 2500

            money = money + premia
        print(money)

nm = input('Name')
gnd = input('Gender')
wrk = int(input('How many work done?'))
jb = input('your job')

if jb == 'Manager':
    employee = Manager(nm, gnd, wrk, jb)

    employee.salary()

if jb == 'Developer':
    employee = Developer(nm, gnd, wrk, jb)

    employee.salary()

"""f# Задание 2

**Описание:** Создайте иерархию классов для различных типов транспортных средств (Необходим один родительский класс и 3 дочерних). Реализуйте метод, который позволяет каждому транспортному средству возвращать собственное описание (Метод в каждом классе должен иметь одинаковое название). Продемонстрируйте вызов данного метода для каждого транспортного средства.


Отрабатываемый принцип: Полиморфизм
"""

class Transport:
    def description(self):
        raise NotImplementedError("ошибка")


class Car(Transport):
    def description(self):
        return "Это автомобиль"


class Bike(Transport):
    def description(self):
        return "Это велосипед"


class Truck(Transport):
    def description(self):
        return "Это грузовик"

vehicles = [Car(), Bike(), Truck()]


for vehicle in vehicles:
    print(vehicle.description())

"""# Задание 3

Онлайн-магазин:
- Создайте модель для онлайн-магазина с классами Product, Order, Customer, и ShoppingCart.
- Product включает информацию о цене, наличии на складе и категории товара.
Order обрабатывает процесс покупки, включая расчет цены с учетом скидок и налогов.
- Customer управляет информацией о пользователе и его истории заказов.
- ShoppingCart позволяет добавлять, удалять и обновлять количество товаров перед оформлением заказа.
"""

class Product:
    def __init__(self, name, price, stock, category):
        self.name = name
        self.price = price
        self.stock = stock
        self.category = category

    def is_available(self):
        return self.stock > 0

    def reduce_stock(self, quantity):
        if quantity <= self.stock:
            self.stock -= quantity
        else:
            raise ValueError("Недостаточно товара на складе")


class Order:
    def __init__(self, customer):
        self.customer = customer
        self.items = []
        self.total_price = 0.0

    def add_item(self, product, quantity):
        if product.is_available():
            product.reduce_stock(quantity)
            self.items.append((product, quantity))
            self.total_price += product.price * quantity
        else:
            raise ValueError("Товар недоступен")

    def calculate_total(self, discount=0, tax_rate=0):
        total_with_discount = self.total_price * (1 - discount)
        total_with_tax = total_with_discount * (1 + tax_rate)
        return total_with_tax


class Customer:
    def __init__(self, name, email):
        self.name = name
        self.email = email
        self.orders = []

    def add_order(self, order):
        self.orders.append(order)


class ShoppingCart:
    def __init__(self):
        self.items = {}

    def add_product(self, product, quantity):
        if product.is_available():
            if product in self.items:
                self.items[product] += quantity
            else:
                self.items[product] = quantity
        else:
            raise ValueError("Товар недоступен")

    def remove_product(self, product):
        if product in self.items:
            del self.items[product]
        else:
            raise ValueError("Товар не в корзине")

    def update_quantity(self, product, quantity):
        if product in self.items:
            if quantity > 0:
                self.items[product] = quantity
            else:
                self.remove_product(product)
        else:
            raise ValueError("Товар не в корзине")

    def checkout(self, customer):
        order = Order(customer)
        for product, quantity in self.items.items():
            order.add_item(product, quantity)
        customer.add_order(order)
        self.items.clear()
        return order

if __name__ == "__main__":

    product1 = Product("Кофе", 5.0, 10, "Напитки")
    product2 = Product("Чай", 3.0, 20, "Напитки")

    customer = Customer("Ваня Стрельцов", "Vanya@gmail.com")

    cart = ShoppingCart()

    cart.add_product(product1, 2)
    cart.add_product(product2, 3)

    order = cart.checkout(customer)

    total_price = order.calculate_total(discount=0.1, tax_rate=0.2)

    print(f"Общая стоимость заказа: {total_price:.2f} руб.")

"""# Задание 4

Симулятор космического корабля:
- Создайте симулятор управления космическим кораблем с классами SpaceShip, CrewMember, и Mission.
- SpaceShip имеет атрибуты для управления топливом, состоянием корпуса, и текущей скоростью.
- CrewMember контролирует здоровье, навыки, и роли в команде (например, пилот, инженер).
- Mission определяет цели, ресурсы, и возможные события (например, аварии, встречи с астероидами).
"""

import random

class SpaceShip:
    def __init__(self, name, fuel, hull_integrity, speed):
        self.name = name
        self.fuel = fuel
        self.hull_integrity = hull_integrity
        self.speed = speed

    def fly(self, distance):
        fuel_needed = distance / 10
        if fuel_needed > self.fuel:
            raise ValueError("Недостаточно топлива для полета!")
        self.fuel -= fuel_needed
        print(f"{self.name} пролетел {distance} км. Осталось топлива: {self.fuel:.2f} литров.")

    def repair_hull(self, amount):
        if amount < 0:
            raise ValueError("Количество ремонта должно быть положительным.")
        self.hull_integrity = min(100, self.hull_integrity + amount)
        print(f"{self.name} отремонтировал корпус. Текущая целостность: {self.hull_integrity:.2f}%.")

    def status(self):
        return f"Корабль: {self.name}, Топливо: {self.fuel:.2f} литров, Целостность корпуса: {self.hull_integrity:.2f}%, Скорость: {self.speed} км/ч"


class CrewMember:
    def __init__(self, name, role, health=100, skills=None):
        self.name = name
        self.role = role
        self.health = health
        self.skills = skills if skills is not None else []

    def train(self, skill):
        if skill not in self.skills:
            self.skills.append(skill)
            print(f"{self.name} улучшил свои навыки: {skill}.")

    def status(self):
        return f"Член экипажа: {self.name}, Роль: {self.role}, Здоровье: {self.health}%, Навыки: {', '.join(self.skills) if self.skills else 'Нет навыков'}"


class Mission:
    def __init__(self, objectives, resources):
        self.objectives = objectives
        self.resources = resources

    def encounter_event(self):
        events = ["Авария на борту", "Встреча с астероидом", "Спасательная операция"]
        event = random.choice(events)
        print(f"Событие: {event}")
        return event

    def status(self):
        return f"Миссия: Цели - {', '.join(self.objectives)}, Ресурсы - {', '.join(self.resources)}"

if __name__ == "__main__":

    spaceship = SpaceShip("Galactic Voyager", fuel=100, hull_integrity=80, speed=500)

    pilot = CrewMember("Алексей", "Пилот")
    engineer = CrewMember("Мария", "Инженер")

    mission = Mission(objectives=["Исследовать планету X", "Собрать образцы"], resources=["Топливо", "Еда"])

    print(spaceship.status())
    print(pilot.status())
    print(engineer.status())
    print(mission.status())

    try:
        spaceship.fly(50)
        spaceship.repair_hull(10)
        event = mission.encounter_event()

        if event == "Авария на борту":
            engineer.health -= 20
            print(f"{engineer.name} пострадал в результате аварии. Текущее здоровье: {engineer.health}%.")

    except ValueError as e:
        print(e)

    print(spaceship.status())
    print(pilot.status())
    print(engineer.status())

"""# Дополнительно:

**Описание:** создайте консольную версию игры крестики-нолики, используя классы
"""

